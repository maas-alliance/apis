openapi: 3.0.0
info:
  version: v0.1
  title: MaaS API
  description:
    The MaaS API is a spec for a web service that let's you plan door-to-door
    trips using a large variety of public and private transport. It 
    integrates real-time information and allows users to book and pay
    for transport.<br/>
    <br/>
    In Mobility as a Service (MaaS) terms, this API is to be exposed by a MaaS 
    Operator or by a MaaS Integrator, rather than by a transport service 
    provider (TSP). This API covers multiple TSPs across a variety of 
    transport modes and focusses on A-to-B trips.<br/>
    <br/>
    This API spec is based on the <a href="https://github.com/skedgo/tripgo-api">TripGo API</a>, copyright 2018 SkedGo Pty Ltd.

  contact:
    name: MaaS Alliance
    url: "https://maas-alliance.eu"
  license:
    name: Apache License 2.0
    url: "https://github.com/maas-alliance/apis/LICENSE"
servers:
  - url: "https://api.tripgo.com/v2"
tags:
  - name: Coverage
  - name: Trip Planning
  - name: Trips
  - name: Geocode
  - name: Locations
  - name: Public Transport

paths:
  /regions:
    get:
      tags: 
        - Coverage
      summary: List of covered regions
      parameters:
        - name: If-None-Match
          in: header
          required: false
          description: ETag (e.g., hash code) of your last response. If this is supplied the response might return a 304, if the data has not changed.
          schema:
            type: string
      description:
        Lists available regions and available transport modes. Provide optional hash code to only return output if the data has changed.
      responses:
        200:
          description: Available regions and modes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionsResponse'
          headers:
            ETag:
              description: ETag (e.g., hash code) of the content of the response. You can pass this as an input header, if you only want to get content in the response if the data has changed.
              schema:
                type: string            
        304:
          description: No change, i.e., If-None-Match matches ETag
  
  /regions/contain:
    get:
      tags:
        - Coverage
      summary: Coverage check by point(s)
      parameters:
        - name: points
          in: query
          required: true
          description: Array of points (string of lat-long pairs, separated by a comma) to check for coverage. Result will indicate whether *all* of the provided points are covered.
          schema:
            type: array
            items:
              type: string
              description: Latitude-longitude pair as a string, separated by a comma
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  covered:
                    type: boolean
                  regionIDs:
                    type: array
                    items:
                      type: string


  /regions/{id}:
    get:
      tags: 
        - Coverage
      summary: Covered region
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'

  /regions/{id}/details:
    get:
      tags: 
        - Coverage
      summary: Details of a covered region
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionDetail'

  /regions/{id}/agencies:
    get:
      tags:
        - Public Transport
      summary: List of agencies for a particular region.
      description:
        Retrieves detailed information about covered public transport agencies for a specified region.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: modes
          in: query
          description: Public transit modes (pt_pub_*) for which results should be returned. [Mode identifier](https://developer.tripgo.com/faq/#mode-identifiers) strings like `pt_pub` or `pt_pub_subway`. In absence, all modes are included.          
          required: false
          schema:
            type: array
            items:
              type: string
        - name: onlyRealTime
          in: query
          description: Boolean to filter only agencies with real-time support. When true, returned agency list will contain only TSP with Real Time service.
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfAgencies'
        400:
          description: Bad request, most likely due to issues with the input or non-posible scenarios.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'

  /agencies/:
    get:
      tags:
        - Public Transport
      summary: List of all agencies
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfAgencies'

  /agencies/{id}:
    get:
      tags:
        - Public Transport
      summary: List of all agencies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agency' 

  /info/route.json:
    post:
      tags:
        - Public Transport
      summary: List of routes for a particular TSP.
      description:
        Retrieves detailed information about routes for a specified agency & region.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Use `modes` to filter by tranport modes. Only results for the given modes will be retuned. When `full` paramater is false, it will retrieve a list of route IDs for the given region/agency and `modes` and `onlyRealTime` if any. You can also retrieve information for a particular list of routes using `routeIDs` or `routeNames`, providing their IDs (or names) as they were given before as a list member in this very same endpoint. The use of filters like `modes`, `onlyRealTime`, `routeNames` and/or `routeIDs` could lead to a empty response. In order to prevent this, make sure such combinations are posible, using previously fetched information.
              properties:
                regionID:
                  type: string
                  description: Region id from `/regions`.
                agencyID:
                  type: string
                  description: TSP ID from `info/agency.json`.
                modes:
                  type: array
                  items:
                    type: string
                  description: Public transit modes (pt_pub_*) for which results should be returned. [Mode identifier](https://developer.tripgo.com/faq/#mode-identifiers) strings like `pt_pub` or `pt_pub_subway`. In absence, all modes are included.
                routesIDs:
                  type: array
                  items:
                    type: string
                    description: Route ID.
                  description: Route IDs to retrieve information from. In case of any missmatch, it'll return error response. Use either this filter or `routeNames`.
                routesNames:
                  type: array
                  items:
                    type: string
                    description: Route name.
                  description: Route names to retrieve information from. In case of any missmatch, it'll return error response. Use either this filter or `routeIDs`.
                onlyRealTime:
                  type: boolean
                  description: Boolean to filter only routes with Real Time support. When true, returned route list will contain only routes with Real Time service.
                  default: false
                full:
                  type: boolean
                  description: Boolean if result should include full information for route/s or just a list with all their IDs.
                  default: false
              required:
                - region
                - agencyID
              example:
                regionID: US_CA_LosAngeles
                agencyID: LACMTA_Rail
                modes:
                  - pt_pub_tram
                full: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: Route information.
                  properties:
                    id:
                      type: string
                      description: Route ID.
                    name:
                      type: string
                      description: Route name.
                    mode:
                      type: string
                      description: Route's mode identifier.
                    numberOfServices:
                      type: integer
                      description: Total number of services on the timetable this route is running within a typical week.
                    stops:
                      type: array
                      items:
                        type: string
                        description: Stop code.
                      description: Used stops set for this route.
                    routeColor:
                      $ref: '#/components/schemas/RGBColor'
                    realTime:
                      $ref: '#/components/schemas/RealTimeData'
                example:
                    - id: 803
                      name: Metro Green Line  (803)
                      mode: pt_pub_tram
                      numberOfServices: 485
                      stops:
                        - 80314
                        - 80312
                        - 80307
                        - 80305
                        - 80301
                    - id: 806
                      name: Metro Expo Line  (806)
                      mode: pt_pub_tram
                      numberOfServices: 562
                      stops:
                        - 80137
                        - 80122
                        - 80139
                        - 80136
                        - 80125
                        - 80138
                      routeColor:
                        - blue: 198
                        - green: 103
                        - red: 0
                      realTime:
                        - alerts: false
                        - positions: true
                        - updates: false
                    - id: 804
                      name: Metro Gold Line  (804)
                      mode: pt_pub_tram
                      numberOfServices: 120
                      stops:
                        - 80404
                        - 80402
                        - 80418
                        - 80426
                        - 80419
                        - 80410
                        - 80427
                        - 80411
        400:
          description: Bad request, most likely due to issues with the input or non-posible scenarios.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'

  /info/service.json:
    post:
      tags:
        - Public Transport
      summary: List of services for a particular route.
      description:
        Retrieves detailed information about services for a specified route.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: When `full` paramater is false, it will retrieve a list of service trips IDs for the given route and `onlyRealTime` if any. You can also retrieve information for a particular list of services using `serviceIDs`.
              properties:
                regionID:
                  type: string
                  description: Region id from `/regions`.
                agencyID:
                  type: string
                  description: TSP ID from `info/agency.json`.
                routeID:
                  type: string
                  description: Route ID from `info/route.json`.
                serviceIDs:
                  type: array
                  items:
                    type: string
                    description: Service trip ID.
                  description: IDs to retrieve information from. In case of any missmatch, it'll return error response.
                onlyRealTime:
                  type: boolean
                  description: Boolean to filter only services with Real Time support. When true, returned service list will contain only services with Real Time support.
                  default: false
                full:
                  type: boolean
                  description: Boolean if result should include full information for service/s or just a list with only `id` field in response.
                  default: false
              required:
                - region
                - agencyID
                - routeID
              example:
                regionID: US_CA_LosAngeles
                agencyID: LACMTA_Rail
                routeID:  806
                serviceIDs:
                  - 40358027
                full: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: Service information.
                  properties:
                    id:
                      type: string
                      description: Service Trip ID.
                    stops:
                      type: array
                      items:
                        type: string
                        description: Stop code.
                      description: Sorted stop list for this trip.
                    realTime:
                      $ref: '#/components/schemas/RealTimeData'
                example:
                  - id: 40358027
                    stops:
                      - 80139
                      - 80138
                      - 80137
                    realTime:
                      - alerts: false
                      - positions: true
                      - updates: false
        400:
          description: Bad request, most likely due to issues with the input or non-posible scenarios.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'

  /routing:
    post:
      tags:
        - Trip Planning
      summary: A-to-B trips
      description:
        Calculates door-to-door trips for the specified mode(s).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingInput'

      responses:
        200:
          description: Successful response. Can include many trips.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingResponse'
        400:
          description: Bad request, most likely due to issues with the input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'

  /routing/grouped:
    post:
      tags:
        - Trip Planning
      summary: A-to-B trips (grouped)
      description:
        Calculates door-to-door trips for the specified mode(s) which are grouped by their similarity (e.g., same public transport trip at a later time)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingInput'

      responses:
        200:
          description: Successful response. Can include many trips.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupedRoutingResponse'
        400:
          description: Bad request, most likely due to issues with the input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'                

  /waypoint:
    post:
      tags:
        - Trip Planning
      summary: A-to-B-via-C trip
      description: |
        Calculates a single A-to-B-via-C trip where transport modes can be customised per segment.

        Of the provided trip pattern items in the `waypoints` input, exactly one should have the
        `time` field set.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                waypoints:
                  type: array
                  items:
                    $ref: '#/components/schemas/TripInputPattern'
                config:
                  $ref: '#/components/schemas/ConfigInput'
              required:
                - config
                - waypoints
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'

  /trip/{id}:
    get:
      tags:
        - Trips
      summary: Retrieve previously computed trip
      description:
        Retrieves previously computed trip. **Important:** These will
        only be valid for the typical duration of a session. To save
        a trip for later use, use the `save` endpoint.

        Rather than constructing this URL directly, you should get it
        from the `temporaryURL` property from a computed trip.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: Identifier of trip as returned by previous server call.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'

  /trip/{id}/save:
    get:
      tags:
        - Trips
      summary: Save trip for later use
      description:
        Saves a previously computed trip to the database so that it
        can get retrieved even after the session expired. Useful for
        sharing trips.

        Rather than constructing this URL directly, you should get it
        from the `saveURL` property from a computed trip.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: Identifier of trip as returned by previous server call.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedTripUrl'

  /trip/{id}/update:
    get:
      tags:
        - Trips
      summary: Update trip with real-time data
      description:
        Updates a previously computed trip with latest available real-time
        data.

        Rather than constructing this URL directly, you should get it
        from the `updateURL` property from a computed trip.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Identifier of trip as returned by previous server call.
        - name: If-None-Match
          in: header
          required: false
          description: Trip's ETag (e.g., hash code) of your last response. If this is supplied the response might return a 304, if the data has not changed.
          schema:
            type: string
      responses:
        200:
          description: Successful response, with updated trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
          headers:
            ETag:
              description: ETag (e.g., hash code) of the content of the response. You can pass this as an input header, if you only want to get content in the response if the data has changed.
              schema:
                type: string            
        304:
          description: No change, i.e., If-None-Match matches ETag

  /trip/{id}/planned:
    post:
      tags:
        - Trips
      summary: Mark trip as planned by a user
      description:
        Marks a previously computed trip as being planned by the user.
        The server will overwrite trips that were previously marked as
        planned and that overlap the newly planned trip.

        Rather than constructing this URL directly, you should get it
        from the `plannedURL` property from a computed trip.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Identifier of trip as returned by previous server call.
        - name: DOCUMENTATION_NOT_COMPLETE
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: Successful response

  /geocode.json:
    get:
      tags:
        - Geocode
      summary: Search and autocompletion
      description:
        Gets the transit stops and other POIs matching a provided search
        string. Optionally does auto completion.
      parameters:
        - name: q
          in: query
          schema:
            type: string
          description: Search term
          required: true
        - name: near
          in: query
          schema:
            type: string
          description: Nearby coordinate as `(lat,lng)` string.
          required: true
        - name: a
          in: query
          schema:
            type: boolean
            default: false
          description: Set to `true` when results are used for autocompletion.  Note that not all POI sources may be used when this is enabled.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  query:
                    type: string
                    description: Search term as provided in input
                  choices:
                    type: array
                    description: Matching results. Might also be of type `StopLocation`.
                    items:
                      $ref: '#/components/schemas/Location'

  /locations:
    get:
      tags:
        - Locations
      summary: POIs for a circular region
      description: |
        Gets points of interest for a provided circular region (coordinate + radius). Which POIs are included depends on the enabled modes (by default all modes). For public transport, transit stops are displayed; for driving, car parks; for bike share, bike share pods; for car share, car share locations; etc.
      parameters:
        - name: lat
          in: query
          schema:
            type: number
          description: Latitude
          required: true
        - name: lng
          in: query
          schema:
            type: number
          description: Longitude
          required: true
        - name: radius
          in: query
          schema:
            type: number
          description: Radius in metres
          required: true
        - name: modes
          in: query
          schema:
            type: array
            items:
              type: string
          description: Mode identifiers for which to include POIs.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupedLocations'
        400:
          description: Bad request, most likely due to issues with the input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'

  /locations/{id}/details:
    get:
      tags:
        - Locations
      summary: Details for a location
      description:
        Gets details, including real-time information, for the provided location by its ID. Returns what3words information and, if available, a nearby transit stop and car park.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for this location
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationInfo'

  /departures.json:
    post:
      tags:
        - Public Transport
      summary: Departure timetable for stop
      description: |
        Gets the departure timetable for a provided list of transit stops. It returns the next `limit` departures after `timeStamp` across any of the provided `embarkationStops`. If multiple stops are provided, the returned services might therefore only cover a subset of the provided stops.

        If `disembarkationStops` is provided, then the returned timetable covers only services between any of the embarkation stops and any of the disembarkation stops. If the region of the embarkation stops and the region of the disembarkations stops is not the same, then you must specify the `disembarkationRegionID` of the `disembarkationStops`.

        Note that the the stop codes in the embarkation stops might *not* match the stop codes provided in the input. This happens if the input specified the stop code of a "parent" station (e.g., a major train station) but all the departures are from one of the parent station's "children" (e.g., a platform of that train station). If that's the case, then the `parentInfo` array will provide additional information on the parent station and its children.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                embarkationRegionID:
                  type: string
                  description: Region code from `/regions` for which to fetch the timetable.
                embarkationStops:
                  type: array
                  items:
                    type: string
                    description: Code of a StopLocation as previously returned by `/locations`. Currently only a single parent stop is allowed in that list.
                disembarkationRegionID:
                  type: string
                  description: Region code from `/regions` for the `disembarkationStops` when the region of `embarkationStops` and `disembarkationStops` does not match.
                disembarkationStops:
                  type: array
                  items:
                    type: string
                    description: Code of a StopLocation as previously returned by `/locations`
                timeStamp:
                  type: string
                  format: date-time
                  description: Earlest time to include in timetable, in ISO8601 format. Default value is current time.
                limit:
                  type: integer
                  description: Number of services to include in timetable.
                  default: 50
              required:
                - region
                - embarkationStops
              example:
                embarkationRegionID: AU_NSW_Sydney
                embarkationStops:
                  - "2035143"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  embarkationStops:
                    type: array
                    items:
                      type: object
                      properties:
                        stopCode:
                          type: string
                        services:
                          type: array
                          items:
                            $ref: '#/components/schemas/ServiceDeparture'
                        wheelchairAccessible:
                          type: boolean
                          description: Is this stop wheelchair accessible? Missing when unknown.
                  parentInfo:
                    $ref: '#/components/schemas/StopLocationParent'
                    # type: array
                    # items:
                    #   $ref: '#/components/schemas/StopLocationParent'
                  alerts:
                    type: array
                    items:
                      $ref: '#/components/schemas/RealTimeAlert'
                required:
                  - embarkationStops

  /arrivals.json:
    post:
      tags:
        - Public Transport
      summary: Arrival timetable for stop
      description:
        Gets the arrival timetable for a provided transit stop by the stop's ID.
      parameters:
        - name: DOCUMENTATION_NOT_COMPLETE
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: Successful response

  /latest.json:
    post:
      tags:
        - Public Transport
      summary: Real-time information for a transit service
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                regionID:
                  type: string
                  description: Region code from `/regions` for which to fetch the real-time information.
                services:
                  type: array
                  items:
                    type: object
                    properties:
                      agencyID:
                        type: string
                      agencyName:
                        type: string
                      serviceID:
                        type: string
                      startStopCode:
                        type: string
                      startTime:
                        type: string
                        format: date-time
                        description: Departure time at `startStopCode` in ISO8601 format. The parameter is optional, but highly recommended. If you don't get real-time data, add this parameter.
                      endStopCode:
                        type: string
                    required:
                      - agencyID
                      - serviceID
                      - startStopCode
              required:
                - region
                - services
              example:
                regionID: AU_NSW_Sydney
                services:
                  - agencyID: Sydney Buses
                    serviceID: "76641565_20160307_11954"
                    startStopCode: "2035143"
                  - agencyID: Sydney Buses
                    serviceID: "76640498_20160307_11954"
                    startStopCode: "2035143"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    type: array
                    items:
                      type: object
                      properties:
                        serviceID:
                          type: string
                        startStopCode:
                          type: string
                        startTime:
                          type: string
                          format: date-time
                          description: Predicted departure time based on real-time information in ISO8601 format.
                        lastUpdate:
                          type: string
                          format: date-time
                          description: Time the departure/arrival time prediction was made in ISO8601 format.
                        realTimeVehicle:
                          # description: The vehicle for this specific service.
                          $ref: '#/components/schemas/RealTimeVehicle'
                        realTimeAlternativeVehicle:
                          description: Alternative vehicles for the same route, but not necessarily, this specific service.
                          type: array
                          items:
                            $ref: '#/components/schemas/RealTimeVehicle'
                        alerts:
                          description: Service alerts / disruption information that affect this service.
                          type: array
                          items:
                            $ref: '#/components/schemas/RealTimeAlert'
                      required:
                        - serviceID
                required:
                  - services

  /service.json:
    get:
      tags:
        - Public Transport
      summary: Get details of transit service.
      description: |
        Gets the details of a transit service from the traveller's perspective. This means that it can include multiple shapes if the vehicle is continuing on as a different service at its destination and if travellers can stay on that vehicle.
      parameters:
        - name: region
          in: query
          schema:
            type: string
          description: Region identifier as returned by `/regions`.
          required: true
        - name: serviceID
          in: query
          schema:
            type: string
          description: Identifier of service as returned by other servlets.
          required: true
        - name: agency
          in: query
          schema:
            type: string
          description: Agency of service as returned other servlets. Not required but recommended as a `serviceID` might match multiple agencies; in that case and when `agencies` is not provide, a service details for a random agency will be returned.
        - name: embarkationDate
          in: query
          schema:
            type: string
            format: date-time
          required: true
          description: Departure time of service in ISO8601 format.
        - name: encode
          in: query
          schema:
            type: boolean
            default: false
          description: Set to `true` to receive waypoints as encoded polyline.
        - name: startStopCode
          in: query
          schema:
            type: string
          description: Stop code of embarkation. First stop to be considered "travelled".
          required: false
        - name: endStopCode
          in: query
          schema:
            type: string
          description: Stop code of disembarkation. Last stop to be considered "travelled".
          required: false
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  shapes:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceShape'
                  realTimeStatus:
                    type: string
                    description: Indicator for whether real-time information is available for this service. Note that even if this says the service is real-time, this does not mean the `startTime` is real-time.
                    enum:
                      - IS_REAL_TIME
                      - CAPABLE
                      - INCAPABLE
                  realTimeVehicle:
                    # description: The vehicle for this specific service.
                    $ref: '#/components/schemas/RealTimeVehicle'
                  realTimeAlternativeVehicle:
                    description: Alternative vehicles for the same route, but not necessarily, this specific service.
                    type: array
                    items:
                      $ref: '#/components/schemas/RealTimeVehicle'
                  alerts:
                    description: Service alerts / disruption information that affect this service.
                    type: array
                    items:
                      $ref: '#/components/schemas/RealTimeAlert'
                  bicycleAccessible:
                    type: boolean
                    description: Can you take a bicycle on this service? Missing when unknown.
                  wheelchairAccessible:
                    type: boolean
                    description: |
                      If this service is wheelchair accessible or not. If this field is missing, this does not mean that it is not accessible, but rather that it is unknown whether it is accessible. Only if the value is present and is `false`, does it mean that the service is not wheelchair accessible.

  /alerts/transit.json:
    get:
      tags:
        - Public Transport
      summary: Get real-time alerts
      parameters:
        - name: region
          in: query
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    $ref: '#/components/schemas/AlertsInfo'
                required:
                  - alerts
        400:
          description: Bad request due to bad input data

components:

  schemas:

    RoutingInput:
      properties:
        config:
          $ref: '#/components/schemas/ConfigInput'
        from:
          $ref: '#/components/schemas/Coordinate'
        to:
          $ref: '#/components/schemas/Coordinate'
        departAfter:
          type: string
          format: date-time
          description: Departure time in ISO8601 format. Either this or `arriveBefore` need to be specified. You can also specify both to find trips that minimise duration within that window.
        arriveBefore:
          type: string
          format: date-time
          description: Arrival time in ISO8601 format. Either this or `departAfter` need to be specified. You can also specify both to find trips that minimise duration within that window.
        modes:
          type: array
          items:
            type: string
          description:
            Mode identifiers for which results should be returned. [Mode identifier](https://developer.tripgo.com/faq/#mode-identifiers) strings like `pt_pub` or `pt_tax_FLITWAYS` exactly as returned by `/regions`. If multiple modes are specified only trips which mix at least two of these modes are returned. [Details of single-modal and multi-modal queries are on our developer site](https://developer.tripgo.com/faq/#single-modal-vs-multi-modal-routing).
        avoidModes:
          type: array
          items:
            type: string
          description:
            Public transport mode identifiers to avoid. Identifier strings like `pt_pub_bus` exactly as returend by `regionInfo.json`. If multiple modes are specified, all will be avoided. Results can still use these modes if no other public transport mode is suitable.
        avoidStops:
          type: array
          items:
            type: string
          description:
            Public stops to avoid. Stop codes usually coming from the `excludedStops` field in `alerts` field. If a stop code corresponds to a "parent" station, it will avoid all "children" stops.
        2wirc:
          type: boolean
          description: Boolean to determine whether two-way-hire vehicles, such as pod-based car-share, should automatically add the cost of returning the vehicle to its pick-up location. Set to false if the cost of the trip should only include the cost that's attributed to this trip and ignore the unavoidable additional cost for returning the vehicle to its pick-up location.
          default: true
        fb:
          type: boolean
          description: _f_olding _b_icycle, boolean to determine whether the bicycle mode should be treated as a folding/portable bicycle. When this is set to `true`, the bicycle will be taken on any public transport mode, and will be taken all the way to the destination, rather than locking it up along the way. (Only applies if `modes` includes `cy_bic`.)
          default: false
      required:
        - from
        - to
        - modes

    ConfigInput:
      type: object
      properties:
        tt:
          type: integer
          description: Preferred minimum transfer time in minutes.
          default: 3
          minimum: 0
          multipleOf: 1
        ws:
          type: integer
          description: Walking speed. 0 slow (2.5 km/h), 1 medium (4 km/h), 2 fast (4.5 km/h).
          default: 1
          minimum: 0
          maximum: 2
          multipleOf: 1
        cs:
          type: integer
          description: Cycling speed. 0 slow (12 km/h), 1 medium (18 km/h), 2 fast (25 km/h).
          default: 1
          minimum: 0
          maximum: 2
          multipleOf: 1
        conc:
          type: boolean
          description: If concession pricing should be use for public transport
          default: false
        wheelchair:
          type: boolean
          description: If user is on wheelchair
          default: false
        wp:
          type: string
          description:
            String with `(%f,%f,%f,%f)` format specifying the user's weighting profile. In order, the weights represent price, environmental impact, duration, and convenience. Each value should be between 0.1 and 2.0. 0.1 means the related cost is unimportant and 2.0 means it's very important to the user. This impacts both the routing results and each trip's `weightedCost` value.
          default: (1, 1, 1, 1)

    TripInputPattern:
      properties:
        latitude:
          type: number
          description: Latitude of the waypoint
        longitue:
          type: number
          description: Longitude of the waypoint
        mode:
          type: string
          description: Mode identifier for the transport mode to use starting at this location. Mode identifier should be as returned by /regions.
        time:
          type: string
          format: date-time
          description: Time to start at this waypoint in ISO8601 format.
      required:
        - latitude
        - longitue
        - mode

    RegionsResponse:
      properties:
        regions:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Region'
        modes:
          type: object
          properties:
            $modeIdentifier:
              description: This is a map/dictionary with multiple items of this type. Each key is a mode identifier string. See https://developer.tripgo.com/faq/#mode-identifiers.
              $ref: '#/components/schemas/ModeInfo'

    RoutingResponse:
      properties:
        trips:
          type: array
          items:
            $ref: '#/components/schemas/Trip'
        regionIDs:
          type: array
          items:
            type: string
      required:
        - trips
        - regionIDs
      # example:
      #   regionIDs:
      #   - DE_BV_Nuremberg

    GroupedRoutingResponse:
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/TripGroup'
        segmentTemplates:
          type: array
          items:
            $ref: '#/components/schemas/SegmentTemplate'
        regionIDs:
          type: array
          items:
            type: string
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/RealTimeAlert'
      required:
        - groups
        - segmentTempaltes
        - regionIDs
      # example:
      #   regionIDs:
      #   - DE_BV_Nuremberg      

    InputError:
      properties:
        missing:
          type: array
          items:
            type: string
        invalid:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              reason:
                type: string


    BookingInfo:
      properties:
        title:
          type: string
          description: Localized title for booking button.
        externalActions:
          type: array
          items:
            type: string
            description: URL or Identifiers such as `lyft` for app-to-app integration.
        url:
          type: string
          description: URL for Form-Based booking flow
        quickBookingsUrl:
          type: string
          description: URL for quick booking flow
        productID:
          type: string
          description: ID of the product in externalActions (currently only used for Uber and Lyft)
        confirmation:
          $ref: 'https://developer.tripgo.com/specs/modules/booking.definitions.yaml#/LocalizedBookingConfirmationInfo'
      required:
        - title

    RGBColor:
      properties:
        red:
          type: integer
          minimum: 0
          maximum: 255
        blue:
          type: integer
          minimum: 0
          maximum: 255
        green:
          type: integer
          minimum: 0
          maximum: 255
      required:
        - red
        - blue
        - green

    Coordinate:
      description:
        The geographic coordinates of a place or event, based on http://schema.org/GeoCoordinates
      externalDocs:
        url: "http://schema.org/GeoCoordinates"
      properties:
        address:
          type: string
          description: Physical address of the item.
        latitude:
          type: number
          description: The latitude of a location. For example 37.42242 (WGS 84).
        longitude:
          type: number
          description: The longitude of a location. For example -122.08585 (WGS 84).
      required:
        - latitude
        - longitude

    Location:
      allOf:
      - $ref: '#/components/schemas/Coordinate'
      - type: object
        properties:
          timezone:
            type: string
            description: Timezone identifier
        required:
          - timezone

    StopLocation:
      allOf:
      - $ref: '#/components/schemas/Location'
      - type: object
        properties:
          code:
            type: string
            description: Internal identifier for the stop
          name:
            type: string
            description: Official name of the stop
          popularity:
            type: integer
            description: Number for popularity of stop defined by number of services and their types.
          modeInfo:
            $ref: '#/components/schemas/ModeInfo'
          wheelchairAccessible:
            type: boolean
            description: Is this stop wheelchair accessible? Missing when unknown.
        required:
          - code
          - name
          - popularity
          - modeInfo

    StopLocationParent:
      allOf:
      - $ref: '#/components/schemas/StopLocation'
      - type: object
        properties:
          children:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/StopLocation'
                - type: object
                  properties:
                    childName:
                      type: string
                      description: Platform number

    BikePodInfo:
      properties:
        identifier:
          type: string
        operator:
          $ref: '#/components/schemas/CompanyInfo'
        inService:
          description: Whether this pod is currently in service (e.g., some might be closed for maintenance or during winter months)
          type: boolean
        totalSpaces:
          description: Static information of total spaces
          type: integer
        availableBikes:
          description: |
            Real-time information of available bikes.

            Note that this can be *more* than the total spaces for providers that have free-floating bicycles that are left at a station even though there's no bike dock.
          type: integer
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp `availableBikes` got recorded in ISO8601 format
        source:
          $ref: '#/components/schemas/DataSourceAttribution'
      required:
        - identifier
        - operator

    BikePodLocation:
      allOf:
      - $ref: '#/components/schemas/Location'
      - type: object
        properties:
          bikePod:
            $ref: '#/components/schemas/BikePodInfo'
          modeInfo:
            $ref: '#/components/schemas/ModeInfo'
        required:
          - bikePod
          - modeInfo

    CarParkInfo:
      properties:
        identifier:
          type: string
        name:
          type: string
        address:
          type: string
        operator:
          $ref: '#/components/schemas/CompanyInfo'
        totalSpaces:
          description: Static information of total spaces
          type: integer
        availableSpaces:
          description: Real-time information of available spaces
          type: integer
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp `availableSpaces` got recorded in ISO8601 format
        onStreetParking:
          type: boolean
        encodedParkingArea:
          type: string
          description: |
            Encoded polygon (or polyline) of parking area. Typically a polyline for on-street parking and a polygon for off-street parking.
            Encoded using Google's Encoded Polyline Algorithm. See https://developers.google.com/maps/documentation/utilities/polylinealgorithm.
        openingHours:
          $ref: '#/components/schemas/OpeningHours'
        pricingTable:
          type: array
          items:
            $ref: '#/components/schemas/PricingTable'
        restrictions:
          $ref: '#/components/schemas/Restrictions'
          type: object
        entrances:
          type: array
          items:
            $ref: '#/components/schemas/Entrance'
        source:
          $ref: '#/components/schemas/DataSourceAttribution'
        info:
          type: string
          description: Additional information about this car park.
      required:
        - identifier
        - name
        - address

    CarParkLocation:
      allOf:
      - $ref: '#/components/schemas/Location'
      - type: object
        properties:
          carPark:
            $ref: '#/components/schemas/CarParkInfo'
          modeInfo:
            $ref: '#/components/schemas/ModeInfo'
        required:
          - carPark
          - modeInfo

    CarPodInfo:
      properties:
        identifier:
          type: string
        operator:
          $ref: '#/components/schemas/CompanyInfo'
        vehicles:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                description: Long-form description of the vehicle
                type: string
              licensePlate:
                type: string
              engineType:
                type: string
              fuelType:
                type: string
              fuelLevel:
                description: Pcercentage how full the vehicle is
                type: integer
                # minValue: 0
                # maxValue: 100
                # multipleOf: 1
              pricingTable:
                $ref: '#/components/schemas/PricingTable'
      required:
        - identifier
        - operator
        - vehicles

    CarPodLocation:
      allOf:
      - $ref: '#/components/schemas/Location'
      - type: object
        properties:
          carPod:
            $ref: '#/components/schemas/CarPodInfo'
          modeInfo:
            $ref: '#/components/schemas/ModeInfo'
        required:
          - carPod
          - modeInfo

    CarRentalInfo:
      properties:
        identifier:
          type: string
        company:
          $ref: '#/components/schemas/CompanyInfo'
        openingHours:
          $ref: '#/components/schemas/OpeningHours'
        source:
          $ref: '#/components/schemas/DataSourceAttribution'
      required:
        - identifier
        - company

    CarRentalLocation:
      allOf:
      - $ref: '#/components/schemas/Location'
      - type: object
        properties:
          carRental:
            $ref: '#/components/schemas/CarRentalInfo'
          modeInfo:
            $ref: '#/components/schemas/ModeInfo'
        required:
          - carRental
          - modeInfo

    CompanyInfo:
      properties:
        name:
          type: string
        phone:
          type: string
        website:
          type: string
        remoteIcon:
          type: string
        remoteDarkIcon:
          type: string
        color:
          $ref: '#/components/schemas/RGBColor'
      required:
        - name

    DataSourceAttribution:
      description:
        Information on how data should get attributed. When present, this needs to get displayed on relevant screens / views.
      properties:
        provider:
          $ref: '#/components/schemas/CompanyInfo'
        disclaimer:
          type: string
          description: Longer disclaimer that should be displayed for this provider
      required:
        - provider

    ArrayOfDataSourceAttribution:
      type: array
      items:
        $ref: '#/components/schemas/DataSourceAttribution'

    LocationInfo:
      allOf:
        oneOf:
          - $ref: '#/components/schemas/StopLocation'
          - $ref: '#/components/schemas/BikePodLocation'
          - $ref: '#/components/schemas/CarParkLocation'
          - $ref: '#/components/schemas/CarPodLocation'
          - $ref: '#/components/schemas/CarRentalLocation'
        - type: object
        properties:
          details:
            properties:
              w3w:
                type: string
              w3wInfoURL:
                type: string

    GroupedLocations:
      type: object
      properties:
        bikePods:
          type: array
          items:
            $ref: '#/components/schemas/BikePodLocation'
        carParks:
           type: array
           items:
             $ref: '#/components/schemas/CarParkLocation'
        carPods:
          type: array
          items:
            $ref: '#/components/schemas/CarPodLocation'
        carRentals:
          type: array
          items:
            $ref: '#/components/schemas/CarRentalLocation'
        stops:
          type: array
          items:
            $ref: '#/components/schemas/StopLocation'

    ModeInfo:
      properties:
        identifier:
          description: Mode identifier string
          type: string
        title:
          description: User-friendly description of this mode
          type: string
        providerURL:
          description: URL to website of transport provider of this mode
          type: string
        remoteIcon:
          description: Part of icon file name that can be fetched from server.
          type: string
        remoteDarkIcon:
          description: Part of icon file name for dark background that can be  fetched from server.
          type: string
        color:
          $ref: '#/components/schemas/RGBColor'
      required:
        - identifier
        - title

    SpecificModeDetails:
      properties:
        modeInfo:
          $ref: '#/components/schemas/ModeInfo'
        agencyIDs:
          description: List of public transport agencies IDs, see `agencies` field
          type: array
          items:
            type: string
        integrations:
          description: Integrations enabled
          type: array
          items:
            type: string
            enum:
              - routing
              - real_time
              - bookings
              - payments
      required:
        - modeInfo

    OpeningHours:
      type: string
      description: Opening hours
      externalDocs:
        url: "http://schema.org/openingHours"

    PricingTable:
      properties:
        title:
          type: string
        subtitle:
          type: string
        currency:
          type: string
        currencySymbol:
          type: string
        entries:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              price:
                type: number
              maxDurationInMinutes:
                type: number
                description: maximun duration for this price in minutes
            required:
              - price
      required:
        - title
        - currency
        - currencySymbol
        - entries
      example:
        title: Casual pricing
        currency: AUD
        currencySymbol: $
        entries:
          - label: First hour
            price: 0
          - label: 1+ hours
            price: 29
        # - title: Weekend pricing
        #   subtitle: Flat rate per exit, per day
        #   currency: AUD
        #   currencySymbol: $
        #   entries:
        #     - label: Sat - Sun
        #       price: 22

    Restrictions:
      description: Information about the car park restrictions.
      properties:
        maxStayInMinutes:
          description: Maximun stay time in minutes
          type: number
        noRestrictionWhenClosed:
          description: If this is `true`, the restrictions applies only during the time zone defined in `openingHours`
          type: boolean
        allowedOnly:
          description: Only the vehicles which satisfy these requirements could stay
          type: array
          items:
            type: string
            enum:
              - SUBSCRIBERS
              - VISITORS
              - CUSTOMERS
              - PERMIT_HOLDERS
              - EVENTS
              - VALET
              - DISABLED
              - COACH
              - MOTORCYCLES
        notAllowed:
          description: The vehicle types which are not allowed to stay
          type: array
          items:
            type: string
            enum:
              - SUVS
              - LPG_CARS
      example:
        maxStayInMinutes: 120
        noRestrictionWhenClosed: true
        allowedOnly: CUSTOMERS

    Entrance:
      allOf:
      - $ref: '#/components/schemas/Coordinate'
      - type: object
        description: Information about the car park entrance.
        properties:
          type:
            description: Entrance type identifier
            type: string
            enum:
                - ENTRANCE_EXIT
                - ENTRANCE_ONLY
                - EXIT_ONLY
                - PEDESTRIAN
                - DISABLED_PEDESTRIAN
                - PERMIT

    LocalCost:
      description: Information about the money cost of this segment in local currency. Missing when price doesn't apply (e.g. walking) or is unknown.
      properties:
        minCost:
          type: number
          description: Minimum value for when the price is within a range
        maxCost:
          type: number
          description: Maximum value for when the price is within a range
        cost:
          type: number
          description: Cost of this segment in local currency (it's an average for ranges, considering quartile info)
        accuracy:
          type: string
          description: Level of accuracy of this cost
          enum:
            - internal_estimate
            - external_estimate
            - confirmed
        currency:
          type: string
          description: The ISO 4217 currency code
      required:
        - cost
        - accuracy
        - currency

    RealTimeAlert:
      description:
        An alert or warning, typically used for services, trip segments, or stop locations.
      properties:
        title:
          type: string
        hashCode:
          type: integer
          description:  |
            Hash code of this alert. Used when servlets provide a list of alerts separately
            from services or trip segments referencing them via their hash code.
        severity:
          type: string
          description: Severity level of the alert
          enum:
            - alert
            - warning
            - info
        text:
          type: string
          description: Longer description of the alert
        url:
          type: string
          description: URL with more information about the disruption
        remoteIcon:
          description: Part of icon file name that can be fetched from server.
          type: string
        location:
          $ref: '#/components/schemas/Location'
        action:
          $ref: '#/components/schemas/RealTimeAction'
      required:
        - title
        - hashCode
        - severity

    RealTimeAction:
      description:
        Provides information about a possible action to deal with the problem described in the alert
      properties:
        text:
          description: description of the action
          type: string
        type:
          type: string
          description: possible actions types, currently only one, may be extended in the future
          enum:
            - rerouteExcludingStops
        excludedStopCodes:
          type: array
          description: Array of affected stop codes
          items:
            type: string
      required:
        - text
        - type

    RealTimeVehicle:
      description:
        Location information of a vehicle based on real-time data
      properties:
        id:
          type: string
          description: Internal identifier
        lastUpdate:
          type: integer
          description: Time the vehicle was at the reported position
        location:
          type: object
          properties:
            latitude:
              type: number
              description: Latitude
            longitude:
              type: number
              description: Longitude
            bearing:
              type: integer
              description: Angle of travel the vehicle was last travelling in. As true bearing. See http://en.wikipedia.org/wiki/Haversine_formula or http://www.movable-type.co.uk/scripts/latlong.html.
              # minValue: 0
              # maxValue: 359
              # multipleOf: 1
          required:
            - latitude
            - longitude
        components:
          description: Components of this vehicle with additional information. The top level array represents connected parts of the vehicle, which you can't walk through without leaving the vehicle (e.g., two trains connected together). The inner level array represents then parts that can be walked through (e.g., the waggons of a train). A bus would have a `[[component1]]`. A train could have `[[c1, c2, c3, c4], [c5, c6, c7, c8]]`. The arrays are ordered by direction of travel always being left-to-right, i.e., the front of the train is the very last element.
          type: array
          items:
            type: array
            items:
              type: object
              properties:
                occupancy:
                  type: string
                  description: How full this part of the vehicle is. See https://developers.google.com/transit/gtfs-realtime/gtfs-realtime-proto.
                  enum:
                    - EMPTY
                    - MANY_SEATS_AVAILABLE
                    - FEW_SEATS_AVAILABLE
                    - STANDING_ROOM_ONLY
                    - CRUSHED_STANDING_ROOM_ONLY
                    - FULL
                    - NOT_ACCEPTING_PASSENGERS
                wifi:
                  type: boolean
                  description: Whether this part of the vehicle has Wi-Fi service.
                airConditioned:
                  type: boolean
                  description: Whether this part of the vehicle is equiped with air conditioned.
                wheelchairAccessible:
                  type: boolean
                  description: Whether this part of the vehicle is wheel chair capable.
                wheelchairSeats:
                  type: integer
                  description: Indicates the number of wheel chairs that can be accommodated on this vehicle.
                model:
                  type: string
                  description: Indicates the type of vehicle performing this trip. Please check agency documentation to determine how this field is composed.
      required:
        - id
        - lastUpdate
        - location

    Region:
      properties:
        id:
          type: string
          description: Identifier for the region
        cities:
          type: array
          description: List of bigger cities covered by this region. Note that this can be empty.
          minItems: 0
          items:
            type: object
            properties:
              latitude:
                type: number
              longitude:
                type: number
              title:
                type: string
              timezone:
                type: string
            required:
              - latitude
              - longitude
              - title
              - timezone
        polygon:
          type: string
          description:
            Encoded polygon of coverage area for the region, using
            Google's Encoded Polyline Algorithm. See
            https://developers.google.com/maps/documentation/utilities/polylinealgorithm.
        modeIdentifiers:
          type: array
          description:
            List of mode identifiers that are available in this region (but not necessarily everywhere in that region).
            Look at `modes` array in `/regions` to get more details on each mode. These are also the modes that can be
             used as input to any routing endpoint. See
             https://developer.tripgo.com/faq/#mode-identifiers.
          items:
            type: string
      required:
        - id
        - polygon
        - cities
        - modeIdentifiers
      example:
        id: DE_BV_Nuremberg
        polygon: SDf9723rhkjFKHAFB
        cities:
          - title: Nuremberg
            latitude: 1.1
            longitude: 14.2
            timezone: Europe/Berlin
          - title: Erlangen
            latitude: 1.2
            longitude: 15.2
            timezone: Europe/Berlin
        modeIdentifiers:
          - pt_pub
          - me_car
          - me_mot
          - cy_bic
          - cy_bic-s_NORIS
          - wa_wal

    RegionDetail:
      allOf:
      - $ref: '#/components/schemas/Region'
      - type: object
        properties:
          supports:
            type: object
            properties:
              streetBicyclePaths:
                type: boolean
                description: Whether the TripGo API has bike path data for this region.
              streetWheelchairAccessibility:
                type: boolean
                description: Whether the TripGo API has information on wheelchair-friendliness of footpaths.
              transitBicycleAccessibility:
                type: boolean
                description: Whether the TripGo API has information on whether you can take bicycles on public transport or not.
              transitConcessionPricing:
                type: boolean
                description: Whether the TripGo API supports concession/student pricing for public transport for this region.
              transitWheelchairAccessibility:
                type: boolean
                description: Whether the TripGo API includes wheelchair accessibility information for public transport for this region.
          modes:
            type: object
            properties:
              $genericModeIdentifier:
                description: This is a map/dictionary with multiple items of this type. Each key is a generic mode identifier. See https://developer.tripgo.com/faq/#mode-identifiers.
                type: object
                properties:
                  modeInfo:
                    $ref: '#/components/schemas/ModeInfo'
                  specificModes:
                    description: List of more specific modes for this identifeir, e.g., `[pt_pub_bus, pt_pub_train]` for pt_pub`.
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecificModeDetails'
          agencies:
            $ref: '#/components/schemas/ArrayOfAgencies'

        required:
          - modes
        example:
          supports:
            streetBicyclePaths: true
            streetWheelchairAccessibility: false
            transitBicycleAccessibility: false
            transitConcessionPricing: false
            transitWheelchairAccessibility: true
          modes:
            cy_bic-s:
              modeInfo:
                title: Bike share
                color:
                  blue: 99
                  green: 199
                  red: 30
                identifier: cy_bic-s
              specificModes:
              - integrations:
                - routing
                - real_time
                modeInfo:
                  title: NorisBike
                  color:
                    blue: 56
                    green: 22
                    red: 236
                  identifier: cy_bic-s_norisbike-nurnberg
                  providerURL: http://www.norisbike.de
              title: Bike share
            me_car-p:
              modeInfo:
                title: Carpooling
                color:
                  blue: 199
                  green: 196
                  red: 46
                identifier: me_car-p
              specificModes:
              - integrations:
                - routing
                modeInfo:
                  title: BlaBlaCar
                  color:
                    blue: 184
                    green: 132
                    red: 19
                  identifier: me_car-p_BlaBlaCar
                  remoteIcon: blablacar
                  providerURL: https://www.blablacar.com
            me_car-r:
              modeInfo:
                title: Car rental
                identifier: me_car-r
                color:
                  blue: 243
                  green: 169
                  red: 115
              specificModes:
              - integrations:
                - routing
                modeInfo:
                  title: Car rental
                  color:
                    blue: 243
                    green: 169
                    red: 115
                  identifier: me_car-r_Budget
            me_car-s:
              modeInfo:
                title: Car share
                color:
                  blue: 243
                  green: 169
                  red: 115
                identifier: me_car-s
              specificModes:
              - integrations:
                - routing
                - real_time
                modeInfo:
                  title: Flinkster
                  color:
                    blue: 27
                    green: 13
                    red: 252
                  identifier: me_car-s_FLINK
                  providerURL: https://www.flinkster.de
            ps_tax:
              modeInfo:
                title: Taxi
                color:
                  blue: 62
                  green: 202
                  red: 221
                identifier: ps_tax
              specificModes:
              - integrations:
                - routing
                modeInfo:
                  title: My Taxi
                  color:
                    blue: 0
                    green: 0
                    red: 0
                  identifier: ps_tax_MYTAXI
                  remoteIcon: mytaxi
                url: https://mytaxi.com
            ps_tnc:
              modeInfo:
                title: Ride share
                color:
                  blue: 243
                  green: 169
                  red: 115
                identifier: ps_tnc
            pt_pub:
              modeInfo:
                title: Public transport
                color:
                  blue: 104
                  green: 197
                  red: 45
                identifier: pt_pub
              specificModes:
              - modeInfo:
                  title: train
                  identifier: pt_pub_train
                agencyIDs:
                - VGN
                - DPN
              - modeInfo:
                  title: subway
                  color:
                    blue: 165
                    green: 103
                    red: 0
                  identifier: pt_pub_subway
                  remoteIcon: subway-germany
                agencyIDs:
                - VGN
              - modeInfo:
                  title: tram
                  identifier: pt_pub_tram
                agencyIDs:
                - VGN
              - modeInfo:
                  title: bus
                  identifier: pt_pub_bus
                agencyIDs:
                - VGN
                - FlixBus

    Agency:
      description: Public transport agency
      properties:
        id:
          description: Agency ID
          type: string
        name:
          description: Name of agency
          type: string
        numberOfServices:
          type: integer
        realTimeStatus:
          type: string
          enum:
            - CAPABLE
            - INCAPABLE
        modes:
          type: array
          items:
            description: Detailed information for this agency under a specific public transport mode.
            type: object
            properties:
              mode:
                type: string
                description: Agency's mode identifier.
              numberOfServices:
                type: integer
                description: Total number of services on the timetable this agency is running within a typical week.
              realTime:
                $ref: '#/components/schemas/RealTimeData'
            required:
              - mode
              - numberOfServices
      required:
        - name
        - numberOfServices
        - realTimeStatus
        - modes

    ArrayOfAgencies:
      type: array
      items:
        $ref: '#/components/schemas/Agency'
      example:
        - name: VGN
          numberOfServices: 50056
          realTimeStatus: CAPABLE
          modes:
            - mode: pt_pub_tram
              numberOfServices: 5698
            - mode: pt_pub_bus
              numberOfServices: 36855
              realTime:
                - alerts: false
                - positions: true
                - updates: true
        - name: FlixBus
          numberOfServices: 1597
          realTimeStatus: INCAPABLE
          modes:
            - mode: pt_pub_coach
              numberOfServices: 120
        - name: DPN
          numberOfServices: 201
          realTimeStatus: INCAPABLE
          modes:
            - mode: pt_pub_train
              numberOfServices: 200

    RealTimeData:
      description: Real Time availability.
      properties:
        alerts:
          type: boolean
          description: Boolean if entity has alerts.
        positions:
          type: boolean
          description: Boolean if entity has vehicle positions.
        updates:
          type: boolean
          description: Boolean if entity has trip updates.

    Service:
      description: Details of public transport service
      properties:
        modeInfo:
          $ref: '#/components/schemas/ModeInfo'
        agencyID:
          type: string
        agencyName:
          type: string
        serviceID:
          type: string
          description: Internal identifier of the service. Related to `trip_id` in GTFS.
        serviceName:
          type: string
          description: Long name of the service. Related to `route_long_name` in GTFS.
        serviceNumber:
          type: string
          description: Short name of the service. Related to `route_short_name` in GTFS.
        serviceDirection:
          type: string
          description: Head sign of the service, indicating its direction. Related to `head_sign` in GTFS.
        serviceColor:
          $ref: '#/components/schemas/RGBColor'
        frequency:
          type: integer
          description: Frequency of service in minutes if it's not running by a timetable.
        ticketWebsiteURL:
          type: string
          description: URL for travellers do get additional information about tickets.
        bicycleAccessible:
          description: Can you take a bicycle on this service? Missing when unknown.
          type: boolean
        wheelchairAccessible:
          type: boolean
          description: |
            If this service is wheelchair accessible or not. If this field is missing, this does not mean that it is not accessible, but rather that it is unknown whether it is accessible. Only if the value is present and is `false`, does it mean that the service is not wheelchair accessible.
      required:
        - modeInfo
        - agencyID
        - serviceID
      example:
        modeInfo:
          title: bus
          identifier: pt_pub_bus
        agencyID: 123
        agencyName: Sydney Buses
        serviceDirection: CITY Circular Quay
        serviceName: Maroubra Beach - Circular Quay
        serviceNumber: "377"
        serviceID: "142496466_20160307_11954"
        bicycleAccessible: false
        wheelchairAccessible: true

    ServiceDeparture:
      description: Details of a service departing at a particular time
      allOf:
      - $ref: '#/components/schemas/Service'
      - type: object
        properties:
          startTime:
            type: string
            format: date-time
            description: Departure of the service as per timetable in ISO8601 format.
          timetableStartTime:
            type: string
            format: date-time
            description: Time according to the timetable in ISO8601 format, if there's real-time data available.
          realTimeStatus:
            type: string
            description: Indicator for whether real-time information is available for this service. Note that even if this says the service is real-time, this does not mean the `startTime` is real-time.
            enum:
              - IS_REAL_TIME
              - CAPABLE
              - INCAPABLE
          realTimeVehicle:
            # description: The vehicle for this specific service.
            $ref: '#/components/schemas/RealTimeVehicle'
          realTimeAlternativeVehicle:
            description: Alternative vehicles for the same route, but not necessarily, this specific service.
            type: array
            items:
              $ref: '#/components/schemas/RealTimeVehicle'
          alerts:
            description: Service alerts / disruption information that affect this service.
            type: array
            items:
              $ref: '#/components/schemas/RealTimeAlert'
        required:
          - startTime
        example:
          startTime: 1458708255
          realTimeStatus: CAPABLE

    ServiceShape:
      description:
        Details of the specific route that a service takes.

        Which stops are included in the `stops` list depends on the `travelled` status of the segment. For travelled segments, all stops including embarkation and disembarkation are included. Non-travelled segments however exclude the embarkation and disembarkation (as those would have been part of the travelled shape already).

        If there's a train from A to H and the travelled part is C to F, which changes its service identifier at E, we end up with 4 segments. 1) non-travelled with `A+B`, 2) travelled with `C+D`, 3) travelled with `E+F`, 4) non-travelled with `G+H`.

      allOf:
      - $ref: '#/components/schemas/Service'
      - type: object
        properties:
          encodedWaypoints:
            type: string
            description: |
              Encoded polyline of route that this service is taking.
              Encoded using Google's Encoded Polyline Algorithm. See https://developers.google.com/maps/documentation/utilities/polylinealgorithm.
          travelled:
            type: boolean
            description: |
              Whether this shape is travelled for the provided input. A transit segment of a trip can include shapes which are not travelled, to indicate where the service was coming from before the embarkation stop and where it's going to after the disembarkation stop.
          stops:
            type: array
            items:
              type: object
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
                code:
                  type: string
                  description: The stop's code (matches GTFS `stopCode`)
                name:
                  type: string
                  description: Name of the stop (might include platform)
                shortName:
                  type: string
                  description: Platform information of the stop. Might double-up with `name`.
                bearing:
                  type: integer
                  description: Angle of travel from this stop to the next. As true bearing. See http://en.wikipedia.org/wiki/Haversine_formula or http://www.movable-type.co.uk/scripts/latlong.html.
                arrival:
                  type: string
                  format: date-time
                  description: Arrival time at this stop in ISO8601 format.
                departure:
                  type: string
                  format: date-time
                  description: Departure time from this stop in ISO8601 format.
                wheelchairAccessible:
                  type: boolean
                  description: Is this stop wheelchair accessible? Missing when unknown.
              required:
                - latitude
                - longitude
                - code
              example:
                bearing: 78
                code: "21105-6"
                departure: 1462331280
                latitude: 59.44123
                longitude: 24.7403
                name: "Balti jaam 6"
        required:
          - encodedWaypoints
          - travelled

    Segment:
      properties:
        reference:
          $ref: '#/components/schemas/SegmentReference'
        template:
          $ref: '#/components/schemas/SegmentTemplate'
      required:
        - reference
        - template

    SegmentReference:
      description:
        Segment information that's specific to a trip. The bulk of the information is in the segment template of the hash code that the segment reference is referencing.
      properties:
        segmentTemplateHashCode:
          type: integer
          description: Hash code of the referenced SegmentTemplate
        startTime:
          type: string
          format: date-time
          description: In ISO8601 format. Reflects real-time data if `realTime == true`.
        endTime:
          type: string
          format: date-time
          description: In ISO8601 format. Reflects real-time data if `realTime == true`
        realTime:
          type: boolean
          description: Present and set to `true` if `startTime` and `endTime` reflect real-time data.
        booking:
          $ref: '#/components/schemas/BookingInfo'
        service:
          $ref: '#/components/schemas/Service'
        timetableStartTime:
          type: string
          format: date-time
          description: For transit segments (optional). Time according to the timetable in ISO8601 format, if there's real-time data available.
        stops:
          type: integer
          description: For transit segments (optional). Number of stops you need to stay on this segment. Does not include embarkation stop, but does include disembarkation stops. E.g., would say `1` if you get on the bus and get off at the next stop. Note here that for flights this differs from the usual counting, i.e., if this is a flight and this value is `1`, then this is indicates a direct "non-stop" flight.
        platform:
          type: string
          description: For transit segments (optional). Title for embarkation platform.
        isCancelled:
          type: boolean
          description: For transit segments (optional). If service has been cancelled according to real-time data.
        realTimeVehicle:
          $ref: '#/components/schemas/RealTimeVehicle'
        realTimeVehicleAlternatives:
          type: array
          items:
            $ref: '#/components/schemas/RealTimeVehicle'
        alertHashCodes:
          type: array
          items:
            description: Hash code of alert; get details from separate alerts dictionary
            type: integer
      required:
        - segmentTemplateHashCode
        - startTime
        - endTime
      example:
        startTime: 1454996190
        endTime: 1454996616
        segmentTemplateHashCode: 1963282048
        stops: 3
        platform: Platform 1

    SegmentTemplate:
      oneOf:
      - $ref: '#/components/schemas/SegmentTemplateMovingTransit'
      - $ref: '#/components/schemas/SegmentTemplateMovingNonTransit'
      - $ref: '#/components/schemas/SegmentTemplateStationary'

    BaseSegmentTemplate:
      description:
        Templates for segments that are typically shared by various trips.<br/>
        <br/>
        The available fields heavily depend on the type of the segment. E.g., stationary segments have `location`, while others have both `from` and `to`.<br/>
        <br/>
        Many of the strings fields have placeholder, such as `<PLATFORM>` that should be filled in with information from the reference. [See documentation](https://developer.tripgo.com/faq/#placeholders-in-segment-templates) on those templates.
      properties:
        hashCode:
          type: integer
          description: Hash code by which this template will get referenced
        modeInfo:
          description: For trip planning results, the mode identifier in here can be more specific that the one from the query, e.g., `pt_pub_bus` even though the query requested `pt_pub`
          $ref: '#/components/schemas/ModeInfo'
        modeIdentifier:
          type: string
          description:
            Mode identifier. Will match input, e.g., `/routing`'s `modes`. See
            https://developer.tripgo.com/faq/#mode-identifiers.
        availability:
          type: string
          description: Indicates availability of the segment, e.g., if it's too late to book this segment for the requested departure time, or if a scheduled service has been cancelled.
          enum:
            - AVAILABLE
            - MISSED_PREBOOKING_WINDOW
            - CANCELLED
        action:
          type: string
          description: Localised single-line instruction for this segment. Can include placeholders.
        notes:
          type: string
          description: Localised multi-line notes, separated by `\n`. Can include placeholders.
        terms:
          type: string
          description: Localised terms provided by transport service provider.
        visibility:
          type: string
          enum:
            - "in summary"
            - "on map"
            - "in details"
          description: Indication where segment should be displayed.
        type:
          type: string
          enum:
           - "stationary"
           - "unscheduled"
           - "scheduled"
          description: Information what kind of segment this is
        sources:
          $ref: '#/components/schemas/ArrayOfDataSourceAttribution'
        localCost:
          $ref: '#/components/schemas/LocalCost'
      required:
        - hashCode
        - availability
        - action
        - visibility
        - type

    BaseSegmentTemplateAnyMoving:
      allOf:
      - $ref: '#/components/schemas/BaseSegmentTemplate'
      - type: object
        properties:
          from:
            $ref: '#/components/schemas/Location'
          to:
            $ref: '#/components/schemas/Location'
          travelDirection:
            type: integer
            description: Angle of travel at the beginning of the segment. As true bearing. See http://en.wikipedia.org/wiki/Haversine_formula or http://www.movable-type.co.uk/scripts/latlong.html.
            # minValue: 0
            # maxValue: 359
            # multipleOf: 1

    SegmentTemplateMovingTransit:
      allOf:
      - $ref: '#/components/schemas/BaseSegmentTemplateAnyMoving'
      - type: object
        properties:
          serviceOperator:
            type: string
          stopCode:
            type: string
            description: Start stop code
          endStopCode:
            type: string
            description: End stop code
          isContinuation:
            type: boolean
            description: |
              Indication whether this segment is a continuation of a previous segment. This
              would mean that the user can stay on the service from the previous segment,
              and that the service is changing its official name and identifiers.
          shapes:
            type: array
            items:
              $ref: '#/components/schemas/ServiceShape'
          smsNumber:
            type: string
            description: SMS number which provides real-time information
          smsMessage:
            type: string
            description: Message to send to `smsNumber` to get real-time information
        required:
          - serviceOperator

    SegmentTemplateMovingNonTransit:
      allOf:
      - $ref: '#/components/schemas/BaseSegmentTemplateAnyMoving'
      - type: object
        properties:
          durationWithoutTraffic:
            type: integer
            description: Duration in seconds that this trip should take if there was no traffic
          metres:
            type: integer
            description: Total travel distance in metres
          metresSafe:
            type: integer
            description: Total travel distance that is considered safe for this mode (see description of 'safe' in the 'streets' array)
          metresUnsafe:
            type: integer
            description: Total travel distance that is considered unsafe for this mode (see description of 'safe' in the 'streets' array)
          metresDismount:
            type: integer
            description: Total travel distance that it's considered necessary to push the bicycle (see description of 'dismount' in the 'streets' array)
          streets:
            type: array
            items:
              type: object
              properties:
                encodedPolyline:
                  type: string
                  description: |
                    Encoded polyline of route that this service is taking.
                    Encoded using Google's Encoded Polyline Algorithm. See https://developers.google.com/maps/documentation/utilities/polylinealgorithm.
                safe:
                  type: boolean
                  description: Indicator for cycle paths if they are cycling-friendly (e.g., there's a bike lane) or for walking paths if they are wheelchair-friendly. Missing if unknown.
                dismount:
                  type: boolean
                  description: Indicator for dismount sections in cycle paths (e.g., steps).
              required:
                - encodedPolyline
          turn-by-turn:
            type: string
            description: Indicates what level of turn-by-turn directions makes sense for this segment
            enum:
              - CYCLING
              - DRIVING
              - WALKING

    SegmentTemplateStationary:
      allOf:
      - $ref: '#/components/schemas/BaseSegmentTemplate'
      - type: object
        properties:
          location:
            $ref: '#/components/schemas/Location'
          isParking:
            type: boolean
            description: If this segment is for parking a private vehicle
          hasCarParks:
            type: boolean
            description: If car park information is available for this segment

    TripMetrics:
      properties:
        caloriesCost:
          type: number
          description: Total active calories used up for the full trip
        carbonCost:
          type: number
          description: Total kg CO2 used up for the full trip
        hassleCost:
          type: number
          description:
            An imaginary dollar-equivalent quantifying the
            inconvenience of the full trip. Should only be used for
            sorting and not shown to the user.
        moneyCost:
          type: number
          description:
            If the trip has no `moneyCost` it does **not** mean that
            it's free, but rather that the price is unknown. It is
            still possible that the price for some segments is known,
            in which case that information is attached to the segments.
        moneyCostUSD:
          type: number
          description:
            Same as `moneyCost` but converted to USD using latest
            exchange rate. Useful for comparing trips which us different
            currencies.
        currencySymbol:
          type: string
          description: The currency symbol for the `moneyCost` value
        weightedCost:
          type: number
          description:
            An imaginary dollar-equivalent representing the total cost
            for the trip, considering the user's preferences. Should
            only be used for sorting and not shown to the user. Lower is better.
      required:
        - hassleCost
        - carbonCost
        - caloriesCost

    BaseTrip:
      properties:
        tripID:
          type: string
          description: Internal identifier of this trip, to use with `trip/{id}` endpoints
        hashCode:
          type: integer
          description: Hash code describing content of the trip. Can be passed as `If-None-Match` header to `trip/{id}/update` endpoint.
        depart:
          type: string
          format: date-time
          description: Departure time in ISO8601 format
        arrive:
          type: string
          format: date-time
          description: Arrival time at destination in ISO8601 format
        mainSegmentHashCode:
          type: integer
          description:
            Hash code for the primary segment of this trip, which can
            be used for giving the trip a name, e.g., "Bus trip".
        availability:
          type: string
          description: Indicates availability of the trip, e.g., if it's too late to book a trip for the requested departure time, or if a scheduled service has been cancelled.
          enum:
            - AVAILABLE
            - MISSED_PREBOOKING_WINDOW
            - CANCELLED
        metrics:
          $ref: '#/components/schemas/TripMetrics'
          description: Total active calories used up for the full trip
        temporaryURL:
          type: string
          description: is a way to retrieve a recently computed trip again. If you open it in the browser, it will show the trip in our web app, but the typical use case of this is to send the "Accept" header with value “application/json” to get the trip in JSON format again. The primary use-case for this is when you say want to send the trip from one device to another, when the user is transitioning say from the phone app to viewing to continuing the trip in an in-car system. Those URLs can only be used shortly aftter computing the trip in the first place.
        saveURL:
          type: string
          description: is used when the trip should stick around for longer. You hit this URL and then get back a persistent URL for the trip. This can be used to share the trip with other people, or to save it to your calendar. That URL then also either shows the trip in our web app, or in JSON format, depending on the request. If a trip was previously saved the JSON will have a persistentURL with that URL in it.
        persistentURL:
          type: string
          description: The persistent URL for this trip (obtained after using saveURL)
        updateURL:
          type: string
          description: updates a recently computed trip with real-time data. In the longevity it’s similar to temporaryURL, but it only makes sense for trips happening now anyway. Note that this is only present if we have real-time data for the trip.
        plannedURL:
          type: string
          description: is used to report back to the backend which trip a user intends to take or is currently taking. The trip then gets added to an internal anonymised database, which we use in for analytics to infer general usage patterns. It is a short-cut that avoids having to send detailed information about the trip (as our backend already has the details of the trip). It is entirely optional for you to use – if you do, we should have a chat, as we can then provide a dedicated database for you, in case you want to analyse this kind of usage data.
      required:
        - tripID
        - depart
        - arrive
        - mainSegmentHashCode
        - availability
        - metrics

    Trip:
      allOf:
      - $ref: '#/components/schemas/BaseTrip'
      - type: object
        properties:
          segments:
            type: array
            items:
              $ref: '#/components/schemas/Segment'
        required:
          - segments

    TripTemplate:
      allOf:
      - $ref: '#/components/schemas/BaseTrip'
      - type: object
        properties:
          segments:
            type: array
            items:
              $ref: '#/components/schemas/SegmentReference'
        required:
          - segments

    TripGroup:
      properties:
        frequency:
          type: integer
          description:  The trip group frequency is a rough estimate for the expected frequency of trips in the trip group.  It’s in minutes.
        trips:
          type: array
          items:
            $ref: '#/components/schemas/TripTemplate'
        sources:
            $ref: '#/components/schemas/ArrayOfDataSourceAttribution'
      required:
        - trips
        - sources

    AlertsInfo:
      properties:
        alert:
          $ref: "#/components/schemas/RealTimeAlert"
        agencies:
          type: array
          items:
            type: string
        stopCodes:
          type: array
          items:
            type: string
        routeIDs:
          type: array
          items:
            type: string
        serviceIDs:
          type: array
          items:
            type: string
      required:
        - alert

    SavedTripUrl:
      properties:
        tripID:
          description: unique identifier for the trip
          type: string
        persistentURL:
          description: URL to retrieve the trip
          type: string
        updateURL:
          description: URL to update the trip, updates a recently computed trip with real-time data. Note that this is only present if real-time data is available for the trip.
          type: string
      required:
        - tripID
        - persistentURL
